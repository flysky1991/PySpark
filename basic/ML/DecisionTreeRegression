%pyspark

from pyspark.ml.linalg import Vectors
from pyspark.ml.regression import DecisionTreeRegressor
from pyspark.ml.regression import DecisionTreeRegressionModel

df = spark.createDataFrame([(1.0, Vectors.dense(1.0)),(0.0, Vectors.sparse(1, [], []))], ["label", "features"])
dt = DecisionTreeRegressor(maxDepth=2, varianceCol="variance")
model = dt.fit(df)

#输出模型的深度、结点数、特征数和特征重要性
print("模型深度:{}".format(model.depth))
print("结点数:{}".format(model.numNodes))
print("模型特征数:{}".format(model.numFeatures))

#SparseVector(1, {0: 1.0})
print("模型特征重要性:{}".format(model.featureImportances))

#模型训练并输出预测值
test0 = spark.createDataFrame([(Vectors.dense(-1.0),)], ["features"])
print("预测结果1:{}".format(model.transform(test0).head().prediction))

test1 = spark.createDataFrame([(Vectors.sparse(1, [0], [1.0]),)], ["features"])
print("预测结果2:{}".format(model.transform(test1).head().prediction))

#指定模型存储路径
temp_path = "/zch/ml/model/test"
dtr_path = temp_path + "/dtr"
dt.write().overwrite().save(dtr_path)

dt2 = DecisionTreeRegressor.load(dtr_path)
print("树模型的最大深度:{}".format(dt2.getMaxDepth()))


model_path = temp_path + "/dtr_model"
model.write().overwrite().save(model_path)

model2 = DecisionTreeRegressionModel.load(model_path)
print("模型结点数目是否相同：".format(model.numNodes == model2.numNodes))

print("模型深度是否相同:".format(model.depth == model2.depth))

print("模型偏差:{}".format(model.transform(test1).head().variance))
